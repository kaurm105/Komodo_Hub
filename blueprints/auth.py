from flask import Blueprint, render_template, redirect, url_for, flash, current_app, request
from flask_login import login_user, logout_user, login_required, current_user
from urllib.parse import urlparse
from app import db
from models import User, RegistrationToken
from forms import LoginForm, RegistrationForm, GenerateTokenForm, StudentRegistrationForm
import logging
import traceback

auth = Blueprint('auth', __name__)

@auth.route('/login', methods=['GET', 'POST'])
def login():
    current_app.logger.info("Login route accessed")
    if current_user.is_authenticated:
        return redirect(url_for('main.dashboard'))

    form = LoginForm()
    if form.validate_on_submit():
        try:
            current_app.logger.debug(f"Attempting login for email: {form.email.data}")
            user = User.query.filter_by(email=form.email.data).first()

            if user and user.check_password(form.password.data):
                login_user(user)
                current_app.logger.info(f"User {user.email} logged in successfully")
                flash('Welcome back!', 'success')
                return redirect(url_for('main.dashboard'))

            current_app.logger.warning(f"Failed login attempt for email: {form.email.data}")
            flash('Invalid email or password', 'danger')

        except Exception as e:
            current_app.logger.error(f"Login error: {str(e)}")
            current_app.logger.error(f"Traceback: {traceback.format_exc()}")
            flash('An error occurred during login. Please try again.', 'danger')
            db.session.rollback()

    return render_template('auth/login.html', form=form)

@auth.route('/register', methods=['GET', 'POST'])
def register():
    current_app.logger.info("Register route accessed")
    if current_user.is_authenticated:
        return redirect(url_for('main.dashboard'))

    form = RegistrationForm()
    if form.validate_on_submit():
        try:
            current_app.logger.debug(f"Processing registration for email: {form.email.data}")

            # Check if email already exists
            if User.query.filter_by(email=form.email.data).first():
                flash('Email already registered', 'danger')
                return render_template('auth/register.html', form=form)

            # Check if username already exists
            if User.query.filter_by(username=form.username.data).first():
                flash('Username already taken', 'danger')
                return render_template('auth/register.html', form=form)

            user = User(
                username=form.username.data,
                email=form.email.data,
                role=form.role.data
            )
            user.set_password(form.password.data)

            db.session.add(user)
            current_app.logger.debug("Attempting to commit new user registration")

            try:
                db.session.commit()
                current_app.logger.info(f"User {user.email} registered successfully")
                flash('Registration successful! Please log in.', 'success')
                return redirect(url_for('auth.login'))
            except Exception as db_error:
                current_app.logger.error(f"Database commit error: {str(db_error)}")
                current_app.logger.error(f"Traceback: {traceback.format_exc()}")
                db.session.rollback()
                flash('An error occurred during registration. Please try again.', 'danger')

        except Exception as e:
            current_app.logger.error(f"Registration error: {str(e)}")
            current_app.logger.error(f"Traceback: {traceback.format_exc()}")
            db.session.rollback()
            flash('An error occurred during registration. Please try again.', 'danger')

    return render_template('auth/register.html', form=form)

@auth.route('/register/student', methods=['GET', 'POST'])
def register_student():
    """Register a new student account using a token generated by a teacher"""
    current_app.logger.info("Student registration route accessed")
    if current_user.is_authenticated:
        return redirect(url_for('main.dashboard'))
        
    form = StudentRegistrationForm()
    if form.validate_on_submit():
        try:
            # Validate token
            is_valid, token_result = RegistrationToken.validate_token(form.registration_token.data)
            if not is_valid:
                flash('Invalid or expired registration token', 'danger')
                return render_template('auth/register_student.html', form=form)
                
            # Create the new student user
            student = User(
                username=form.username.data,
                email=form.email.data,
                role='student'  # Force role to be student
            )
            student.set_password(form.password.data)
            
            db.session.add(student)
            
            # Mark the token as used
            if isinstance(token_result, RegistrationToken):
                token_result.mark_as_used(student.id)
            
            db.session.commit()
            current_app.logger.info(f"Student {student.email} registered successfully with token")
            flash('Registration successful! Please log in.', 'success')
            return redirect(url_for('auth.login'))
            
        except Exception as e:
            current_app.logger.error(f"Student registration error: {str(e)}")
            current_app.logger.error(f"Traceback: {traceback.format_exc()}")
            db.session.rollback()
            flash('An error occurred during registration. Please try again.', 'danger')
            
    return render_template('auth/register_student.html', form=form)

@auth.route('/tokens/generate', methods=['GET', 'POST'])
@login_required
def generate_token():
    """Generate registration tokens (teachers only)"""
    # Verify the user is a teacher
    if current_user.role != 'teacher' and not current_user.is_admin:
        flash('Access denied. Only teachers can generate registration tokens.', 'danger')
        return redirect(url_for('main.dashboard'))
        
    form = GenerateTokenForm()
    tokens = RegistrationToken.query.filter_by(created_by_id=current_user.id).order_by(RegistrationToken.created_at.desc()).all()
    
    if form.validate_on_submit():
        try:
            # Generate a new token
            token = RegistrationToken.generate_token(current_user)
            flash('Registration token generated successfully!', 'success')
            return redirect(url_for('auth.generate_token'))
            
        except Exception as e:
            current_app.logger.error(f"Token generation error: {str(e)}")
            db.session.rollback()
            flash('An error occurred while generating the token. Please try again.', 'danger')
    
    return render_template('auth/generate_token.html', form=form, tokens=tokens)

@auth.route('/logout')
@login_required
def logout():
    if current_user.is_authenticated:
        email = current_user.email
        logout_user()
        current_app.logger.info(f"User {email} logged out")
        flash('You have been logged out.', 'info')
    return redirect(url_for('auth.login'))